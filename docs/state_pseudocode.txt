-awaiting unit selection (accept map and menu input)
-unit selected (map and menu input)
-animating move (no input)
-awaiting menu instruction (accept only menu input)
-selecting target (accept map and menu input)
-animating menu instruction (no input)
-turn transition (no input)

pseudocode for input handling:
    get(event):
        if event is mouse:
            if mouse target is the map:
                mouse_pos = GetMousePosition()
                MapEventHandler(mouse_pos, gs.map)
            if mouse target is the menu:
                mouse_pos = GetMousePosition()
                MenuEventHandler(mouse_pos, gs.map, gs.menu)

def map_event_handler(mouse_pos, gs.map, gs.selected_unit_index):
    get_phase
    if phase == ANIMATING_MOVE or AWAITING_MENU_INSTRUCTION or ANIMATING_INSTRUCTION or TURN_TRANSITION:
        return
    ref_square = get_the_row_and_col(mouse_pos)
    if phase == AWAITING_UNIT_SELECTION:
        select_unit(ref_square)
    if phase == UNIT_SELECTED:
        prep_unit_move(ref_square, gs)
        

    if phase == SELECTING_TARGET:
        pass # OBVIOUS PLACEHOLDER
    
def prep_unit_move(ref_square, gs):
    if check_square_occupied(ref_square):
            return
        ref_square = (r, c)
        start_square = gs.selected_unit_location
        distance = sqrt((start_square(0)-ref_square(0))**2 + (start_square(1)-ref_square(1))**2)
        frmes_per_square = 10
        duration = distance*frames_per_square
        anim = MovingAnim(duration, ref_square)
        unit = unit_list[gs.selected_unit_index]
        unit.anim = anim
        gs.phase = Phase.ANIMATING_MOVE

pseudocode for display:
    switch currentState:
        awaitingUnitSelection:# no need to do anything special for now
            DisplayMap()
            DisplayMenu()
            DisplayUnits(None)
        unitSelected:
            DisplayMap()
            DisplayMenu()
            HighlightSpaces(gs.activeUnit, gs.map, unitSelected)
            DisplayUnits(None)
        animatingMove:
            DisplayMap()
            DisplayMenu()
            DisplayUnits(gs.activeUnit, Moving (enum))
        awaitingMenuInstruction:
            DisplayMap()
            DisplayMenu()
            DisplayUnits(None)
        selectingTarget: # only if player chooses attack
            DisplayMap()
            DisplayMenu()
            HighlightSpaces(gs.activeUnit, gs,map unitSelected)
        animatingMenuInstruction:
            DisplayMap()
            DisplayMenu()
            DisplayUnits(gs.activeUnit, Attacking (enum))
        turnTransition:
            DisplayMap()
            DisplayMenu()
            if gs.turn = "red":
                turn = "blue"
            else:
                turn = "red"
            AnimateTurnBanner(turn)

MapEventHandler(mouse_pos, gs.map, gs.game_state):
    if gs.game_state = awaiting_unit_selection:
        (tile_x, tile_y) = get_tile(mouse_pos)
        
def display_units(screen, map, unitList):
    for r in range(BOARD_Y):
        for c in range(BOARD_X):
            # print(f"the vertical value is {r*SQ_SIZE+WALLSIZE}")
            index = map[r][c]
            if index != -1:
                thisUnit = unitList[index]
                thisType = thisUnit.unit_name()
                thisTeam = thisUnit.team()
                screen.blit(IMAGES[thisTeam, thisType], p.Rect(c*SQ_SIZE, r*SQ_SIZE+WALLSIZE, SQ_SIZE, SQ_SIZE))

def display units:
    for each row:
        for each col:
            get unit
                if unit.action == no_action:
                    anim_still(unit)
                if moving:
                    anim_moving(unit)
                if attacking:
                    anim_attacking(unit)
                if taking_daming:
                    anim_taking_damage(unit)
    
def anim_still(unit, r, c):
    just get the unit type
    and the unit team
    and blit it in its location

anim_moving(unit, r, c):
    get the unit type and team
    